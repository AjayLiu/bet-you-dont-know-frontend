{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ajayl\\\\Desktop\\\\repos\\\\bet-you-dont-know\\\\client\\\\src\\\\components\\\\Room\\\\ChatBox\\\\ChatBox.tsx\";\nimport styles from \"./ChatBox.module.scss\";\nimport SocketContext from \"@context/SocketContext\";\nimport dayjs from \"dayjs\";\nimport React, { useState, useContext, useEffect } from \"react\";\n\nconst ChatBox = props => {\n  const socket = useContext(SocketContext);\n  const {\n    0: messageText,\n    1: setMessageText\n  } = useState(\"\");\n  const slowmodeDuration = 0.5;\n  const {\n    0: timeOfLastMessage,\n    1: setTimeOfLastMessage\n  } = useState(Date.now());\n\n  const sendMessage = () => {\n    // check if the message is empty\n    if (messageText.trim() != \"\") {\n      // prevent spamming with slowmode\n      const secondsSinceLastMessage = (Date.now() - timeOfLastMessage) / 1000;\n\n      if (secondsSinceLastMessage >= slowmodeDuration) {\n        setTimeOfLastMessage(Date.now());\n        socket.emit(\"sendMessage\", props.lobbyID, messageText, props.sender);\n        setMessageText(\"\");\n      }\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n\n  const {\n    0: timeOfJoin,\n    1: setTimeOfJoin\n  } = useState(dayjs());\n  useEffect(() => {\n    setTimeOfJoin(timeOfJoin);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chatLabel,\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.messagesContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.messagesWrapper,\n        children: props.chatList.map((msg, idx) => {\n          // first check if the message is sent after the user joined (prevent them from seeing past messages)\n          // users can see past 10 seconds of messages\n          if (dayjs(msg.timestamp).isAfter(timeOfJoin.subtract(10, \"seconds\"))) {\n            const oddEvenStyle = idx % 2 == 0 ? styles.oddLine : styles.evenLine; // server message\n\n            if (msg.isServer) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `${styles.messageRow} ${styles.serverMessage} ${oddEvenStyle}`,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.messageContent,\n                  children: msg.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 21\n                }, this)\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 19\n              }, this);\n            } // user message\n\n\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `${styles.messageRow} ${styles.userMessage} ${oddEvenStyle} `,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.sender,\n                children: (msg.user.isLeader ? \"[LEADER] \" : \"\") + msg.user.displayName + \": \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.messageContent,\n                children: msg.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.inputContainer,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"chat\",\n        className: styles.chatInputBox,\n        value: messageText,\n        maxLength: 100,\n        placeholder: \"Send Message\",\n        onChange: e => setMessageText(e.target.value),\n        onKeyDown: e => handleKeyDown(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\nexport default ChatBox;","map":{"version":3,"sources":["C:/Users/ajayl/Desktop/repos/bet-you-dont-know/client/src/components/Room/ChatBox/ChatBox.tsx"],"names":["styles","SocketContext","dayjs","React","useState","useContext","useEffect","ChatBox","props","socket","messageText","setMessageText","slowmodeDuration","timeOfLastMessage","setTimeOfLastMessage","Date","now","sendMessage","trim","secondsSinceLastMessage","emit","lobbyID","sender","handleKeyDown","event","key","timeOfJoin","setTimeOfJoin","container","chatLabel","messagesContainer","messagesWrapper","chatList","map","msg","idx","timestamp","isAfter","subtract","oddEvenStyle","oddLine","evenLine","isServer","messageRow","serverMessage","messageContent","message","userMessage","user","isLeader","displayName","inputContainer","chatInputBox","e","target","value"],"mappings":"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","sourcesContent":["import styles from \"./ChatBox.module.scss\";\r\nimport SocketContext from \"@context/SocketContext\";\r\nimport { ChatMessage, User } from \"@shared/types\";\r\nimport dayjs from \"dayjs\";\r\nimport React, { useState, useContext, useEffect, useRef } from \"react\";\r\n\r\ninterface Props {\r\n  sender: User;\r\n  lobbyID: string;\r\n  chatList: Array<ChatMessage>;\r\n}\r\n\r\nconst ChatBox: React.FC<Props> = (props) => {\r\n  const socket = useContext(SocketContext);\r\n\r\n  const [messageText, setMessageText] = useState(\"\");\r\n\r\n  const slowmodeDuration = 0.5;\r\n  const [timeOfLastMessage, setTimeOfLastMessage] = useState(Date.now());\r\n\r\n  const sendMessage = () => {\r\n    // check if the message is empty\r\n    if (messageText.trim() != \"\") {\r\n      // prevent spamming with slowmode\r\n      const secondsSinceLastMessage = (Date.now() - timeOfLastMessage) / 1000;\r\n      if (secondsSinceLastMessage >= slowmodeDuration) {\r\n        setTimeOfLastMessage(Date.now());\r\n        socket.emit(\"sendMessage\", props.lobbyID, messageText, props.sender);\r\n        setMessageText(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  const [timeOfJoin, setTimeOfJoin] = useState(dayjs());\r\n  useEffect(() => {\r\n    setTimeOfJoin(timeOfJoin);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.chatLabel}>Chat</div>\r\n      <div className={styles.messagesContainer}>\r\n        <div className={styles.messagesWrapper}>\r\n          {props.chatList.map((msg, idx) => {\r\n            // first check if the message is sent after the user joined (prevent them from seeing past messages)\r\n            // users can see past 10 seconds of messages\r\n            if (\r\n              dayjs(msg.timestamp).isAfter(timeOfJoin.subtract(10, \"seconds\"))\r\n            ) {\r\n              const oddEvenStyle =\r\n                idx % 2 == 0 ? styles.oddLine : styles.evenLine;\r\n\r\n              // server message\r\n              if (msg.isServer) {\r\n                return (\r\n                  <div\r\n                    key={idx}\r\n                    className={`${styles.messageRow} ${styles.serverMessage} ${oddEvenStyle}`}\r\n                  >\r\n                    <div className={styles.messageContent}>{msg.message}</div>\r\n                  </div>\r\n                );\r\n              }\r\n\r\n              // user message\r\n              return (\r\n                <div\r\n                  key={idx}\r\n                  className={`${styles.messageRow} ${styles.userMessage} ${oddEvenStyle} `}\r\n                >\r\n                  <div className={styles.sender}>\r\n                    {(msg.user.isLeader ? \"[LEADER] \" : \"\") +\r\n                      msg.user.displayName +\r\n                      \": \"}\r\n                  </div>\r\n                  <div className={styles.messageContent}>{msg.message}</div>\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className={styles.inputContainer}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"chat\"\r\n          className={styles.chatInputBox}\r\n          value={messageText}\r\n          maxLength={100}\r\n          placeholder={\"Send Message\"}\r\n          onChange={(e) => setMessageText(e.target.value)}\r\n          onKeyDown={(e) => handleKeyDown(e)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n"]},"metadata":{},"sourceType":"module"}