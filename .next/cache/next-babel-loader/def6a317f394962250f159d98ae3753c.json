{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ajayl\\\\Desktop\\\\repos\\\\bet-you-dont-know\\\\client\\\\src\\\\components\\\\Room\\\\GameScreen\\\\Answering\\\\Answering.tsx\";\nimport SocketContext from \"@context/SocketContext\";\nimport { useContext } from \"react\";\nimport styles from \"./Answering.module.scss\";\n\nconst Answering = props => {\n  var _props$lobby$game$cur;\n\n  const socket = useContext(SocketContext);\n  const currentQuestion = props.lobby.game.currentQuestion;\n  const amCurrentlyAnswering = ((_props$lobby$game$cur = props.lobby.game.currentAnswerer) === null || _props$lobby$game$cur === void 0 ? void 0 : _props$lobby$game$cur.socketID) === props.me.socketID;\n\n  const onQuestionClick = idx => {\n    // if it is this player's turn to answer\n    if (amCurrentlyAnswering) {\n      socket.emit(\"guessAnswer\", props.me, idx);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.answeringContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.question,\n      children: currentQuestion.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.currentlyAnsweringIndicator} ${amCurrentlyAnswering && styles.currentlyAnswering}`,\n      children: [\"Currently Answering:\", \" \", amCurrentlyAnswering ? \"YOU\" : props.lobby.game.currentAnswerer.displayName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.choices,\n      children: // render each question (randomized)\n      currentQuestion.allChoicesRandomized.map((questionStr, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.choice} ${amCurrentlyAnswering && styles.answering}`,\n          onClick: () => onQuestionClick(idx),\n          style: {\n            color: amCurrentlyAnswering && props.me.guessIndex === idx && \"orange\"\n          } // mark choice as orange if selected by user\n          ,\n          children: questionStr\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Answering;","map":{"version":3,"sources":["C:/Users/ajayl/Desktop/repos/bet-you-dont-know/client/src/components/Room/GameScreen/Answering/Answering.tsx"],"names":["SocketContext","useContext","styles","Answering","props","socket","currentQuestion","lobby","game","amCurrentlyAnswering","currentAnswerer","socketID","me","onQuestionClick","idx","emit","answeringContainer","question","currentlyAnsweringIndicator","currentlyAnswering","displayName","choices","allChoicesRandomized","map","questionStr","choice","answering","color","guessIndex"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,wBAA1B;AAEA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;;AAMA,MAAMC,SAA0B,GAAIC,KAAD,IAAW;AAAA;;AAC5C,QAAMC,MAAM,GAAGJ,UAAU,CAACD,aAAD,CAAzB;AACA,QAAMM,eAAe,GAAGF,KAAK,CAACG,KAAN,CAAYC,IAAZ,CAAiBF,eAAzC;AACA,QAAMG,oBAAoB,GACxB,0BAAAL,KAAK,CAACG,KAAN,CAAYC,IAAZ,CAAiBE,eAAjB,gFAAkCC,QAAlC,MAA+CP,KAAK,CAACQ,EAAN,CAASD,QAD1D;;AAEA,QAAME,eAAe,GAAIC,GAAD,IAAiB;AACvC;AACA,QAAIL,oBAAJ,EAA0B;AACxBJ,MAAAA,MAAM,CAACU,IAAP,CAAY,aAAZ,EAA2BX,KAAK,CAACQ,EAAjC,EAAqCE,GAArC;AACD;AACF,GALD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAEZ,MAAM,CAACc,kBAAvB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEd,MAAM,CAACe,QAAvB;AAAA,gBAAkCX,eAAe,CAACW;AAAlD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,SAAS,EAAG,GAAEf,MAAM,CAACgB,2BAA4B,IAC/CT,oBAAoB,IAAIP,MAAM,CAACiB,kBAChC,EAHH;AAAA,yCAKuB,GALvB,EAMGV,oBAAoB,GACjB,KADiB,GAEjBL,KAAK,CAACG,KAAN,CAAYC,IAAZ,CAAiBE,eAAjB,CAAiCU,WARvC;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAYE;AAAK,MAAA,SAAS,EAAElB,MAAM,CAACmB,OAAvB;AAAA,gBAEI;AACAf,MAAAA,eAAe,CAACgB,oBAAhB,CAAqCC,GAArC,CAAyC,CAACC,WAAD,EAAcV,GAAd,KAAsB;AAC7D,4BACE;AAEE,UAAA,SAAS,EAAG,GAAEZ,MAAM,CAACuB,MAAO,IAC1BhB,oBAAoB,IAAIP,MAAM,CAACwB,SAChC,EAJH;AAKE,UAAA,OAAO,EAAE,MAAMb,eAAe,CAACC,GAAD,CALhC;AAME,UAAA,KAAK,EAAE;AACLa,YAAAA,KAAK,EACHlB,oBAAoB,IACpBL,KAAK,CAACQ,EAAN,CAASgB,UAAT,KAAwBd,GADxB,IAEA;AAJG,WANT,CAWK;AAXL;AAAA,oBAaGU;AAbH,WACOV,GADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAiBD,OAlBD;AAHJ;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD,CAlDD;;AAoDA,eAAeX,SAAf","sourcesContent":["import SocketContext from \"@context/SocketContext\";\r\nimport { Lobby, User } from \"@shared/types\";\r\nimport { useContext } from \"react\";\r\nimport styles from \"./Answering.module.scss\";\r\ninterface Props {\r\n  lobby: Lobby;\r\n  me: User;\r\n}\r\n\r\nconst Answering: React.FC<Props> = (props) => {\r\n  const socket = useContext(SocketContext);\r\n  const currentQuestion = props.lobby.game.currentQuestion;\r\n  const amCurrentlyAnswering =\r\n    props.lobby.game.currentAnswerer?.socketID === props.me.socketID;\r\n  const onQuestionClick = (idx: number) => {\r\n    // if it is this player's turn to answer\r\n    if (amCurrentlyAnswering) {\r\n      socket.emit(\"guessAnswer\", props.me, idx);\r\n    }\r\n  };\r\n  return (\r\n    <div className={styles.answeringContainer}>\r\n      <div className={styles.question}>{currentQuestion.question}</div>\r\n      <div\r\n        className={`${styles.currentlyAnsweringIndicator} ${\r\n          amCurrentlyAnswering && styles.currentlyAnswering\r\n        }`}\r\n      >\r\n        Currently Answering:{\" \"}\r\n        {amCurrentlyAnswering\r\n          ? \"YOU\"\r\n          : props.lobby.game.currentAnswerer.displayName}\r\n      </div>\r\n      <div className={styles.choices}>\r\n        {\r\n          // render each question (randomized)\r\n          currentQuestion.allChoicesRandomized.map((questionStr, idx) => {\r\n            return (\r\n              <div\r\n                key={idx}\r\n                className={`${styles.choice} ${\r\n                  amCurrentlyAnswering && styles.answering\r\n                }`}\r\n                onClick={() => onQuestionClick(idx)}\r\n                style={{\r\n                  color:\r\n                    amCurrentlyAnswering &&\r\n                    props.me.guessIndex === idx &&\r\n                    \"orange\",\r\n                }} // mark choice as orange if selected by user\r\n              >\r\n                {questionStr}\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Answering;\r\n"]},"metadata":{},"sourceType":"module"}